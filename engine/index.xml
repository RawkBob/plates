<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>The Engine on Plates</title><link>https://platesphp.com/engine/</link><description>Recent content in The Engine on Plates</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://platesphp.com/engine/index.xml" rel="self" type="application/rss+xml"/><item><title>Extensions</title><link>https://platesphp.com/engine/extensions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://platesphp.com/engine/extensions/</guid><description>Creating extensions couldn&amp;rsquo;t be easier, and can really make Plates sing for your specific project. Start by creating a class that implements \League\Plates\Extension\ExtensionInterface. Next, register your template functions within a register() method.
Simple extensions example use League\Plates\Engine; use League\Plates\Extension\ExtensionInterface; class ChangeCase implements ExtensionInterface { public function register(Engine $engine) { $engine-&amp;gt;registerFunction(&amp;#39;uppercase&amp;#39;, [$this, &amp;#39;uppercaseString&amp;#39;]); $engine-&amp;gt;registerFunction(&amp;#39;lowercase&amp;#39;, [$this, &amp;#39;lowercaseString&amp;#39;]); } public function uppercaseString($var) { return strtoupper($var); } public function lowercaseString($var) { return strtolower($var); } } To use this extension in your template, simply call your new functions:</description></item><item><title>File Extensions</title><link>https://platesphp.com/engine/file-extensions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://platesphp.com/engine/file-extensions/</guid><description>Plates does not enforce a specific template file extension. By default it assumes .php. This file extension is automatically appended to your template names when rendered. You are welcome to change the default extension using one of the following methods.
Constructor method // Create new engine and set the default file extension to &amp;#34;.tpl&amp;#34; $template = new League\Plates\Engine(&amp;#39;/path/to/templates&amp;#39;, &amp;#39;tpl&amp;#39;); Setter method // Sets the default file extension to &amp;#34;.tpl&amp;#34; after engine instantiation $template-&amp;gt;setFileExtension(&amp;#39;tpl&amp;#39;); Manually assign If you prefer to manually set the file extension, simply set the default file extension to null.</description></item><item><title>Folders</title><link>https://platesphp.com/engine/folders/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://platesphp.com/engine/folders/</guid><description>Folders make it really easy to organize and access your templates. Folders allow you to group your templates under different namespaces, each of which having their own file system path.
Creating folders To create folders, use the addFolder() method:
// Create new Plates instance $templates = new League\Plates\Engine(); // Add folders $templates-&amp;gt;addFolder(&amp;#39;admin&amp;#39;, &amp;#39;/path/to/admin/templates&amp;#39;); $templates-&amp;gt;addFolder(&amp;#39;emails&amp;#39;, &amp;#39;/path/to/email/templates&amp;#39;); Using folders To use the folders you created within your project simply append the folder name with two colons before the template name.</description></item><item><title>Functions</title><link>https://platesphp.com/engine/functions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://platesphp.com/engine/functions/</guid><description>While extensions are awesome for adding additional reusable functionality to Plates, sometimes it&amp;rsquo;s easier to just create a one-off function for a specific use case. Plates makes this easy to do.
Registering functions // Create new Plates engine $templates = new \League\Plates\Engine(&amp;#39;/path/to/templates&amp;#39;); // Register a one-off function $templates-&amp;gt;registerFunction(&amp;#39;uppercase&amp;#39;, function ($string) { return strtoupper($string); }); To use this function in a template, simply call it like any other function:
&amp;lt;h1&amp;gt;Hello &amp;lt;?=$this-&amp;gt;e($this-&amp;gt;uppercase($name))&amp;lt;/h1&amp;gt; It can also be used in a batch compatible function:</description></item><item><title>Overview</title><link>https://platesphp.com/engine/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://platesphp.com/engine/overview/</guid><description>Plates uses a central object called the Engine, which is used to store the environment configuration, functions and extensions. It helps decouple your templates from the file system and other dependencies. For example, if you want to change the folder where your templates are stored, you can do so by simply changing the path in one location.
Basic usage // Create new Plates engine $templates = new League\Plates\Engine(&amp;#39;/path/to/templates&amp;#39;); // Add any additional folders $templates-&amp;gt;addFolder(&amp;#39;emails&amp;#39;, &amp;#39;/path/to/emails&amp;#39;); // Load any additional extensions $templates-&amp;gt;loadExtension(new League\Plates\Extension\Asset(&amp;#39;/path/to/public&amp;#39;)); // Create a new template $template = $templates-&amp;gt;make(&amp;#39;emails::welcome&amp;#39;); Dependency Injection Plates is designed to be easily passed around your application and easily injected in your controllers or other application objects.</description></item><item><title>Themes</title><link>https://platesphp.com/engine/themes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://platesphp.com/engine/themes/</guid><description>Themes provide an alternative to template path resolution that allow for a holistic approach to template overrides and fallbacks.
Usage Given an engine configuration like:
use League\Plates\{Engine, Template\Theme}; $plates = Engine::fromTheme(Theme::hierarchy([ Theme::new(&amp;#39;/templates/main&amp;#39;, &amp;#39;Main&amp;#39;), // parent Theme::new(&amp;#39;/templates/user&amp;#39;, &amp;#39;User&amp;#39;), // child Theme::new(&amp;#39;/templates/seasonal&amp;#39;, &amp;#39;Seasonal&amp;#39;), // child2 ])); And a file structure like:
templates/ main/ layout.php home.php header.php user/ layout.php header.php seasonal/ header.php The following looks ups, regardless of where they are called from, would resolve to the following files:</description></item></channel></rss>