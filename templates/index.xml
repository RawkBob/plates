<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Templates on Plates</title><link>https://platesphp.com/templates/</link><description>Recent content in Templates on Plates</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://platesphp.com/templates/index.xml" rel="self" type="application/rss+xml"/><item><title>Data</title><link>https://platesphp.com/templates/data/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://platesphp.com/templates/data/</guid><description>It&amp;rsquo;s very common to share application data (variables) with a template. Data can be whatever you want: strings, arrays, objects, etc. Plates allows you set both template specific data as well as shared template data.
Assign data Assigning data is done from within your application code, such as a controller. There are a number of ways to assign the data, depending on how you structure your objects.
// Create new Plates instance $templates = new League\Plates\Engine(&amp;#39;/path/to/templates&amp;#39;); // Assign via the engine&amp;#39;s render method echo $templates-&amp;gt;render(&amp;#39;profile&amp;#39;, [&amp;#39;name&amp;#39; =&amp;gt; &amp;#39;Jonathan&amp;#39;]); // Assign via the engine&amp;#39;s make method $template = $templates-&amp;gt;make(&amp;#39;profile&amp;#39;, [&amp;#39;name&amp;#39; =&amp;gt; &amp;#39;Jonathan&amp;#39;]); // Assign directly to a template object $template = $templates-&amp;gt;make(&amp;#39;profile&amp;#39;); $template-&amp;gt;data([&amp;#39;name&amp;#39; =&amp;gt; &amp;#39;Jonathan&amp;#39;]); Accessing data Template data is available as locally scoped variables at the time of rendering.</description></item><item><title>Escaping</title><link>https://platesphp.com/templates/escaping/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://platesphp.com/templates/escaping/</guid><description>Escaping is a form of data filtering which sanitizes unsafe, user supplied input prior to outputting it as HTML. Plates provides two shortcuts to the htmlspecialchars() function.
Escaping example &amp;lt;h1&amp;gt;Hello, &amp;lt;?=$this-&amp;gt;escape($name)?&amp;gt;&amp;lt;/h1&amp;gt; &amp;lt;!-- Using the alternative, shorthand function --&amp;gt; &amp;lt;h1&amp;gt;Hello, &amp;lt;?=$this-&amp;gt;e($name)?&amp;gt;&amp;lt;/h1&amp;gt; Batch function calls The escape functions also support batch function calls, which allow you to apply multiple functions, including native PHP functions, to a variable at one time.
&amp;lt;p&amp;gt;Welcome &amp;lt;?=$this-&amp;gt;e($name, &amp;#39;strip_tags|strtoupper&amp;#39;)?</description></item><item><title>Functions</title><link>https://platesphp.com/templates/functions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://platesphp.com/templates/functions/</guid><description>Template functions in Plates are accessed using the $this pseudo-variable.
&amp;lt;p&amp;gt;Hello, &amp;lt;?=$this-&amp;gt;escape($name)?&amp;gt;&amp;lt;/p&amp;gt; Custom fuctions In addition to the functions included with Plates, it&amp;rsquo;s also possible to add one-off functions, or even groups of functions, known as extensions.
Batch function calls Sometimes you need to apply more than function to a variable in your templates. This can become somewhat illegible. The batch() function helps by allowing you to apply multiple functions, including native PHP functions, to a variable at one time.</description></item><item><title>Inheritance</title><link>https://platesphp.com/templates/inheritance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://platesphp.com/templates/inheritance/</guid><description>By combining layouts and sections, Plates allows you to &amp;ldquo;build up&amp;rdquo; your pages using predefined sections. This is best understand using an example:
Inheritance example The following example illustrates a pretty standard website. Start by creating a site template, which includes your header and footer as well as any predefined content sections. Notice how Plates makes it possible to even set default section content, in the event that a page doesn&amp;rsquo;t define it.</description></item><item><title>Layouts</title><link>https://platesphp.com/templates/layouts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://platesphp.com/templates/layouts/</guid><description>The layout() function allows you to define a layout template that a template will implement. It&amp;rsquo;s like having separate header and footer templates in one file.
Define a layout The layout() function can be called anywhere in a template, since the layout template is actually rendered second. Typically it&amp;rsquo;s placed at the top of the file.
&amp;lt;?php $this-&amp;gt;layout(&amp;#39;template&amp;#39;) ?&amp;gt;&amp;lt;h1&amp;gt;User Profile&amp;lt;/h1&amp;gt; &amp;lt;p&amp;gt;Hello, &amp;lt;?=$this-&amp;gt;e($name)?&amp;gt;&amp;lt;/p&amp;gt; This function also works with folders:
&amp;lt;?php $this-&amp;gt;layout(&amp;#39;shared::template&amp;#39;) ?</description></item><item><title>Nesting</title><link>https://platesphp.com/templates/nesting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://platesphp.com/templates/nesting/</guid><description>Including another template into the current template is done using the insert() function:
&amp;lt;?php $this-&amp;gt;insert(&amp;#39;partials/header&amp;#39;) ?&amp;gt;&amp;lt;p&amp;gt;Your content.&amp;lt;/p&amp;gt; &amp;lt;?php $this-&amp;gt;insert(&amp;#39;partials/footer&amp;#39;) ?&amp;gt; The insert() function also works with folders:
&amp;lt;?php $this-&amp;gt;insert(&amp;#39;partials::header&amp;#39;) ?&amp;gt;Alternative syntax The insert() function automatically outputs the rendered template. If you prefer to manually output the response, use the fetch() function instead:
&amp;lt;?=$this-&amp;gt;fetch(&amp;#39;partials/header&amp;#39;)?&amp;gt;Assign data To assign data (variables) to a nested template, pass them as an array to the insert() or fetch() functions.</description></item><item><title>Overview</title><link>https://platesphp.com/templates/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://platesphp.com/templates/overview/</guid><description>Plates templates are very simple PHP objects. Generally you&amp;rsquo;ll want to create these using the two factory methods, make() and render(), in the engine. For example:
// Create new Plates instance $templates = new League\Plates\Engine(&amp;#39;/path/to/templates&amp;#39;); // Render a template in a subdirectory echo $templates-&amp;gt;render(&amp;#39;partials/header&amp;#39;); // Render a template echo $templates-&amp;gt;render(&amp;#39;profile&amp;#39;, [&amp;#39;name&amp;#39; =&amp;gt; &amp;#39;Jonathan&amp;#39;]); For more information about how Plates is designed to be easily added to your application, see the section on dependency injection.</description></item><item><title>Sections</title><link>https://platesphp.com/templates/sections/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://platesphp.com/templates/sections/</guid><description>The start() and stop functions allow you to build sections (or blocks) of content within your template, and instead of them being rendered directly, they are saved for use elsewhere. For example, in your layout template.
Creating sections You define the name of the section with the start() function. To end a section call the stop() function.
&amp;lt;?php $this-&amp;gt;start(&amp;#39;welcome&amp;#39;) ?&amp;gt;&amp;lt;h1&amp;gt;Welcome!&amp;lt;/h1&amp;gt; &amp;lt;p&amp;gt;Hello &amp;lt;?=$this-&amp;gt;e($name)?&amp;gt;&amp;lt;/p&amp;gt; &amp;lt;?php $this-&amp;gt;stop() ?&amp;gt; Stacking section content By default, when you render a section its content will overwrite any existing content for that section.</description></item><item><title>Syntax</title><link>https://platesphp.com/templates/syntax/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://platesphp.com/templates/syntax/</guid><description>While the actual syntax you use in your templates is entirely your choice (it&amp;rsquo;s just PHP after all), we suggest the following syntax guidelines to help keep templates clean and legible.
Guidelines Always use HTML with inline PHP. Never use blocks of PHP. Always escape potentially dangerous variables prior to outputting using the built-in escape functions. More on escaping here. Always use the short echo syntax (&amp;lt;?=) when outputting variables.</description></item></channel></rss>